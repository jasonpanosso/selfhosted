---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
  labels:
    app.kubernetes.io/name: sonarr
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: sonarr
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sonarr
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: wait-for-cnpg
          image: postgres:17
          command: ["sh", "-c"]
          args:
            - |
              echo "Waiting for pgcluster to be ready..."
              until psql sonarr -c '' 2>&1; do
                sleep 2
              done
              echo "pgcluster ready"
          env:
            - name: PGCONNECT_TIMEOUT
              value: "3"
            - name: PGHOST
              value: pgcluster-rw.servarr.svc.cluster.local
            - name: PGUSER
              value: sonarr
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: sonarr-db
                  key: password
          securityContext:
            allowPrivilegeEscalation: false
      containers:
        - image: ghcr.io/linuxserver/sonarr:version-4.0.13.2932
          imagePullPolicy: Always
          name: sonarr
          envFrom:
            - configMapRef:
                name: standard-env
            - configMapRef:
                name: sonarr
          env:
            - name: SONARR__POSTGRES__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sonarr-db
                  key: password
            - name: SONARR__AUTH__APIKEY
              valueFrom:
                secretKeyRef:
                  name: servarr-api-keys
                  key: sonarr
            - name: SONARR__LOG__DBENABLED
              valueFrom:
                configMapKeyRef:
                  name: booleans
                  key: falsy
          ports:
            - containerPort: 8989
              name: http
          readinessProbe:
            httpGet:
              path: /ping
              port: 8989
            initialDelaySeconds: 10
            periodSeconds: 15
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 1500m
              memory: 2048Mi
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: config
              mountPath: /config
            - name: media
              mountPath: /data
      volumes:
        - name: config
          emptyDir: {}
        - name: media
          persistentVolumeClaim:
            claimName: media
