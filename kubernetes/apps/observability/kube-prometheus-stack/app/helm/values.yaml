---
crds:
  enabled: false
  upgradeJob:
    enabled: false
    forceConflicts: true
cleanPrometheusOperatorObjectNames: true

prometheusOperator:
  enabled: true
prometheus:
  enabled: true
  prometheusSpec:
    # migrate to prompp upon 2.55 (otlp support)
    # image:
    #   registry: docker.io
    #   repository: prompp/prompp
    #   tag: 2.53.2-0.2.5
    securityContext:
      runAsNonRoot: true
      runAsUser: 64535
      runAsGroup: 64535
      fsGroup: 64535
    priorityClassName: system-cluster-critical
    resources:
      requests:
        cpu: 1000m
        memory: 2Gi
      limits:
        cpu: 2000m
        memory: 4Gi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: rook-ceph-block
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 40Gi
    enableFeatures:
      - exemplar-storage
    enableRemoteWriteReceiver: true
    retention: 10d
    retentionSize: 40Gi
    serviceMonitorSelector:
      matchLabels:
        none: none
    podMonitorSelector:
      matchLabels:
        none: none
    probeSelector:
      matchLabels:
        none: none
    scrapeConfigSelector:
      matchLabels:
        none: none
    tsdb:
      outOfOrderTimeWindow: 30m
    exemplars:
      maxSize: 100000
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    additionalConfig:
      otlp:
        keepIdentifyingResourceAttributes: true
        translationStrategy: UnderscoreEscapingWithSuffixes # dashboard compatibility
        promoteResourceAttributes:
          - service.instance.id
          - service.name
          - service.namespace
          - service.version
          - cloud.availability_zone
          - cloud.region
          - container.name
          - deployment.environment
          - deployment.environment.name
          - k8s.cluster.name
          - k8s.container.name
          - k8s.cronjob.name
          - k8s.daemonset.name
          - k8s.deployment.name
          - k8s.job.name
          - k8s.namespace.name
          - k8s.pod.name
          - k8s.replicaset.name
          - k8s.statefulset.name
          - cluster

kubernetesServiceMonitors:
  enabled: true

alertmanager:
  enabled: true
  alertmanagerSpec:
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 100m
        memory: 256Mi
    alertmanagerConfiguration:
      name: alertmanager
      global:
        resolveTimeout: 5m
    externalUrl: https://alerts.${domain}.${tld}
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: rook-ceph-block
          resources:
            requests:
              storage: 1Gi

kubeEtcd:
  service:
    selector:
      component: kube-apiserver # etcd runs on control plane nodes
kubeApiServer:
  enabled: true
kubelet:
  enabled: true
kubeControllerManager:
  enabled: true
coreDns:
  enabled: true

kubeProxy:
  enabled: false

nodeExporter:
  enabled: true
prometheus-node-exporter:
  nameOverride: node-exporter
  fullnameOverride: node-exporter
  priorityClassName: system-node-critical
  resources:
    limits:
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_host_ip"]
          targetLabel: instance

kubeStateMetrics:
  enabled: true
kube-state-metrics:
  fullnameOverride: kube-state-metrics
  priorityClassName: system-cluster-critical
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 100m
      memory: 256Mi
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node

grafana:
  enabled: false
  forceDeployDashboards: true
  sidecar:
    dashboards:
      annotations:
        grafana_folder: Kubernetes

additionalPrometheusRulesMap:
  dockerhub-rules:
    groups:
      - name: dockerhub
        rules:
          - alert: DockerhubRateLimitRisk
            annotations:
              summary: Kubernetes cluster Dockerhub rate limit risk
            expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
            labels:
              severity: critical
  oom-rules:
    groups:
      - name: oom
        rules:
          - alert: OomKilled
            annotations:
              summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
            expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
            labels:
              severity: critical
